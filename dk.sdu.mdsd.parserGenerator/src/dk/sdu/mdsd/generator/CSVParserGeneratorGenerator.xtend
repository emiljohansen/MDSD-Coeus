/*
 * generated by Xtext 2.21.0
 */
package dk.sdu.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CSVParserGeneratorGenerator extends AbstractGenerator {
	
	@Inject extension ParserClassGenerator parserGenerator

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		parserGenerator.doGenerate(resource, fsa, context);
		fsa.generateFile('/parser/src/dk/sdu/mmmi/parser/ParserMain.java', generateMainClass());
	}
	
	def generateProjectStructure(IFileSystemAccess2 fsa) {
		
	}
	
	def CharSequence generateMainClass() '''
		package dk.sdu.mmmi.parser;
		
		public class ParserMain{
	
		public static ExternalCheck externals;
	
		public static CSVParser p = new CSVParser(externals);
	
		public static void main(String[] args) {
			p.parse();
		}
	
}
		
	'''

}
