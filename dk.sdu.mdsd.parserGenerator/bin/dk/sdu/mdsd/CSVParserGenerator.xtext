grammar dk.sdu.mdsd.CSVParserGenerator with org.eclipse.xtext.common.Terminals

generate cSVParserGenerator "http://www.sdu.dk/mdsd/CSVParserGenerator"

Parser:
	file=FileDecl? 'columns' '{' columns+=ColDecl+ '}' mods+=Modification* out=Output?
;

FileDecl:
	'file' ':'  name=STRING 'separator' sepchar=STRING
;

ColDecl:
	name=ID ':' type=Type mods+=Modification*
;

Modification:
	{ValueM} 'modifications' '{' mods+=ValueMod* '}'| {Ext} 'externals' '{' mods+=External* '}' | {Stat} 'statistics' '{' mods+=StatFunc* '}' | {ColAct} 'layout' '{' mods+=ColumnAction* '}'| {Constrain} 'constraints' '{' mods+=Constraint* '}'
;

Output:
	'output' ':' name=STRING ('records' number=INT)?	
;

ValueMod:
	name=[ColDecl] '=' exp=LogExp
;

Type:
	{Str} 'string' | {Integ} 'integer' | {Date} 'date' | {Floa} 'float'
;

LogExp returns Expression:
	Comparison (('||' {Or.left=current} | '&&' {And.left=current}) right=Comparison)* 
;

Comparison returns Expression:
	Sum (('<' {Lt.left=current} | '>' {Gt.left=current} | '==' {Equ.left=current} | '!=' {Neq.left=current} | '=<' {Leq.left=current} | '=>' {Geq.left=current}) right = Sum)*
;

Parens:
	'(' exp=LogExp ')'
;

External:
	'extFunc' name=ID '(' inp=[ColDecl] ')'
;

StatFunc:
	{Max} 'max' '(' input=[ColDecl] ')' | {Min} 'min' '(' input=[ColDecl] ')' | {Std} 'std' '(' input=[ColDecl] ')'
	| {SumFunc} 'sum' '(' input=[ColDecl] ')' | {Mean} 'mean' '(' input=[ColDecl] ')'
;

ColumnAction:
	{Add} 'addCol' name=ID ':' type=Type 'with' mod=LogExp | {Rem} 'remCol' name=[ColDecl]
;

Sum returns Expression:
	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
;

Factor returns Expression:
	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
;

Primary returns Expression:
	Number | Parens | ColumnVar | DateLiteral | StringLiteral
;

ColumnVar:
	name=[ColDecl]
;

Number:
	{Num} value=INT
;

Constraint:
	'satisfies' name=[ColDecl] 'constraint' exp=LogExp
;

DateLiteral:
	{DateLit} 'd'value=STRING
;

StringLiteral:
	{StringLit} value=STRING	
;


