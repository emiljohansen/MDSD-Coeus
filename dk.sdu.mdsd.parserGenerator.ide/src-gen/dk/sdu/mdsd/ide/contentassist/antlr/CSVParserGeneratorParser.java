/*
 * generated by Xtext 2.21.0
 */
package dk.sdu.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mdsd.ide.contentassist.antlr.internal.InternalCSVParserGeneratorParser;
import dk.sdu.mdsd.services.CSVParserGeneratorGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CSVParserGeneratorParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CSVParserGeneratorGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CSVParserGeneratorGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModificationAccess().getAlternatives(), "rule__Modification__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getLogExpAccess().getAlternatives_1_0(), "rule__LogExp__Alternatives_1_0");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_1_0(), "rule__Comparison__Alternatives_1_0");
			builder.put(grammarAccess.getStatFuncAccess().getAlternatives(), "rule__StatFunc__Alternatives");
			builder.put(grammarAccess.getColumnActionAccess().getAlternatives(), "rule__ColumnAction__Alternatives");
			builder.put(grammarAccess.getSumAccess().getAlternatives_1_0(), "rule__Sum__Alternatives_1_0");
			builder.put(grammarAccess.getFactorAccess().getAlternatives_1_0(), "rule__Factor__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getParserAccess().getGroup(), "rule__Parser__Group__0");
			builder.put(grammarAccess.getFileDeclAccess().getGroup(), "rule__FileDecl__Group__0");
			builder.put(grammarAccess.getColDeclAccess().getGroup(), "rule__ColDecl__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getValueModAccess().getGroup(), "rule__ValueMod__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_3(), "rule__Type__Group_3__0");
			builder.put(grammarAccess.getLogExpAccess().getGroup(), "rule__LogExp__Group__0");
			builder.put(grammarAccess.getLogExpAccess().getGroup_1(), "rule__LogExp__Group_1__0");
			builder.put(grammarAccess.getLogExpAccess().getGroup_1_0_0(), "rule__LogExp__Group_1_0_0__0");
			builder.put(grammarAccess.getLogExpAccess().getGroup_1_0_1(), "rule__LogExp__Group_1_0_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_0(), "rule__Comparison__Group_1_0_0__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_1(), "rule__Comparison__Group_1_0_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_2(), "rule__Comparison__Group_1_0_2__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_3(), "rule__Comparison__Group_1_0_3__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_4(), "rule__Comparison__Group_1_0_4__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_5(), "rule__Comparison__Group_1_0_5__0");
			builder.put(grammarAccess.getParensAccess().getGroup(), "rule__Parens__Group__0");
			builder.put(grammarAccess.getExternalAccess().getGroup(), "rule__External__Group__0");
			builder.put(grammarAccess.getStatFuncAccess().getGroup_0(), "rule__StatFunc__Group_0__0");
			builder.put(grammarAccess.getStatFuncAccess().getGroup_1(), "rule__StatFunc__Group_1__0");
			builder.put(grammarAccess.getStatFuncAccess().getGroup_2(), "rule__StatFunc__Group_2__0");
			builder.put(grammarAccess.getStatFuncAccess().getGroup_3(), "rule__StatFunc__Group_3__0");
			builder.put(grammarAccess.getStatFuncAccess().getGroup_4(), "rule__StatFunc__Group_4__0");
			builder.put(grammarAccess.getColumnActionAccess().getGroup_0(), "rule__ColumnAction__Group_0__0");
			builder.put(grammarAccess.getColumnActionAccess().getGroup_1(), "rule__ColumnAction__Group_1__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1(), "rule__Sum__Group_1__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_0(), "rule__Sum__Group_1_0_0__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_1(), "rule__Sum__Group_1_0_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1_0_0(), "rule__Factor__Group_1_0_0__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1_0_1(), "rule__Factor__Group_1_0_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getParserAccess().getFileAssignment_0(), "rule__Parser__FileAssignment_0");
			builder.put(grammarAccess.getParserAccess().getColumnsAssignment_3(), "rule__Parser__ColumnsAssignment_3");
			builder.put(grammarAccess.getParserAccess().getModsAssignment_5(), "rule__Parser__ModsAssignment_5");
			builder.put(grammarAccess.getParserAccess().getOutAssignment_6(), "rule__Parser__OutAssignment_6");
			builder.put(grammarAccess.getFileDeclAccess().getNameAssignment_2(), "rule__FileDecl__NameAssignment_2");
			builder.put(grammarAccess.getColDeclAccess().getNameAssignment_0(), "rule__ColDecl__NameAssignment_0");
			builder.put(grammarAccess.getColDeclAccess().getTypeAssignment_2(), "rule__ColDecl__TypeAssignment_2");
			builder.put(grammarAccess.getColDeclAccess().getModsAssignment_3(), "rule__ColDecl__ModsAssignment_3");
			builder.put(grammarAccess.getOutputAccess().getNameAssignment_2(), "rule__Output__NameAssignment_2");
			builder.put(grammarAccess.getValueModAccess().getNameAssignment_0(), "rule__ValueMod__NameAssignment_0");
			builder.put(grammarAccess.getValueModAccess().getExpAssignment_2(), "rule__ValueMod__ExpAssignment_2");
			builder.put(grammarAccess.getLogExpAccess().getRightAssignment_1_1(), "rule__LogExp__RightAssignment_1_1");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
			builder.put(grammarAccess.getParensAccess().getExpAssignment_1(), "rule__Parens__ExpAssignment_1");
			builder.put(grammarAccess.getExternalAccess().getNameAssignment_1(), "rule__External__NameAssignment_1");
			builder.put(grammarAccess.getExternalAccess().getInpAssignment_3(), "rule__External__InpAssignment_3");
			builder.put(grammarAccess.getStatFuncAccess().getInputAssignment_0_3(), "rule__StatFunc__InputAssignment_0_3");
			builder.put(grammarAccess.getStatFuncAccess().getInputAssignment_1_3(), "rule__StatFunc__InputAssignment_1_3");
			builder.put(grammarAccess.getStatFuncAccess().getInputAssignment_2_3(), "rule__StatFunc__InputAssignment_2_3");
			builder.put(grammarAccess.getStatFuncAccess().getInputAssignment_3_3(), "rule__StatFunc__InputAssignment_3_3");
			builder.put(grammarAccess.getStatFuncAccess().getInputAssignment_4_3(), "rule__StatFunc__InputAssignment_4_3");
			builder.put(grammarAccess.getColumnActionAccess().getNameAssignment_0_2(), "rule__ColumnAction__NameAssignment_0_2");
			builder.put(grammarAccess.getColumnActionAccess().getModAssignment_0_4(), "rule__ColumnAction__ModAssignment_0_4");
			builder.put(grammarAccess.getColumnActionAccess().getNameAssignment_1_2(), "rule__ColumnAction__NameAssignment_1_2");
			builder.put(grammarAccess.getSumAccess().getRightAssignment_1_1(), "rule__Sum__RightAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getRightAssignment_1_1(), "rule__Factor__RightAssignment_1_1");
			builder.put(grammarAccess.getColumnVarAccess().getNameAssignment(), "rule__ColumnVar__NameAssignment");
			builder.put(grammarAccess.getNumberAccess().getValueAssignment_1(), "rule__Number__ValueAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getNameAssignment_1(), "rule__Constraint__NameAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getExpAssignment_3(), "rule__Constraint__ExpAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CSVParserGeneratorGrammarAccess grammarAccess;

	@Override
	protected InternalCSVParserGeneratorParser createParser() {
		InternalCSVParserGeneratorParser result = new InternalCSVParserGeneratorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CSVParserGeneratorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CSVParserGeneratorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
