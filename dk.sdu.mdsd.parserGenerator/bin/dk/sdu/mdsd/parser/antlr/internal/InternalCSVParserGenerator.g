/*
 * generated by Xtext 2.21.0
 */
grammar InternalCSVParserGenerator;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dk.sdu.mdsd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.sdu.mdsd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.sdu.mdsd.services.CSVParserGeneratorGrammarAccess;

}

@parser::members {

 	private CSVParserGeneratorGrammarAccess grammarAccess;

    public InternalCSVParserGeneratorParser(TokenStream input, CSVParserGeneratorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Parser";
   	}

   	@Override
   	protected CSVParserGeneratorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleParser
entryRuleParser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParserRule()); }
	iv_ruleParser=ruleParser
	{ $current=$iv_ruleParser.current; }
	EOF;

// Rule Parser
ruleParser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParserAccess().getFileFileDeclParserRuleCall_0_0());
				}
				lv_file_0_0=ruleFileDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParserRule());
					}
					set(
						$current,
						"file",
						lv_file_0_0,
						"dk.sdu.mdsd.CSVParserGenerator.FileDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='columns'
		{
			newLeafNode(otherlv_1, grammarAccess.getParserAccess().getColumnsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getParserAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParserAccess().getColumnsColDeclParserRuleCall_3_0());
				}
				lv_columns_3_0=ruleColDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParserRule());
					}
					add(
						$current,
						"columns",
						lv_columns_3_0,
						"dk.sdu.mdsd.CSVParserGenerator.ColDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getParserAccess().getRightCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParserAccess().getModsModificationParserRuleCall_5_0());
				}
				lv_mods_5_0=ruleModification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParserRule());
					}
					add(
						$current,
						"mods",
						lv_mods_5_0,
						"dk.sdu.mdsd.CSVParserGenerator.Modification");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getParserAccess().getOutOutputParserRuleCall_6_0());
				}
				lv_out_6_0=ruleOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParserRule());
					}
					set(
						$current,
						"out",
						lv_out_6_0,
						"dk.sdu.mdsd.CSVParserGenerator.Output");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleFileDecl
entryRuleFileDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileDeclRule()); }
	iv_ruleFileDecl=ruleFileDecl
	{ $current=$iv_ruleFileDecl.current; }
	EOF;

// Rule FileDecl
ruleFileDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='File'
		{
			newLeafNode(otherlv_0, grammarAccess.getFileDeclAccess().getFileKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFileDeclAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFileDeclAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFileDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleColDecl
entryRuleColDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColDeclRule()); }
	iv_ruleColDecl=ruleColDecl
	{ $current=$iv_ruleColDecl.current; }
	EOF;

// Rule ColDecl
ruleColDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColDeclAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getColDeclAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColDeclAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"dk.sdu.mdsd.CSVParserGenerator.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColDeclAccess().getModsModificationParserRuleCall_3_0());
				}
				lv_mods_3_0=ruleModification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColDeclRule());
					}
					add(
						$current,
						"mods",
						lv_mods_3_0,
						"dk.sdu.mdsd.CSVParserGenerator.Modification");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModification
entryRuleModification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModificationRule()); }
	iv_ruleModification=ruleModification
	{ $current=$iv_ruleModification.current; }
	EOF;

// Rule Modification
ruleModification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModificationAccess().getValueModParserRuleCall_0());
		}
		this_ValueMod_0=ruleValueMod
		{
			$current = $this_ValueMod_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModificationAccess().getExternalParserRuleCall_1());
		}
		this_External_1=ruleExternal
		{
			$current = $this_External_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModificationAccess().getStatFuncParserRuleCall_2());
		}
		this_StatFunc_2=ruleStatFunc
		{
			$current = $this_StatFunc_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModificationAccess().getColumnActionParserRuleCall_3());
		}
		this_ColumnAction_3=ruleColumnAction
		{
			$current = $this_ColumnAction_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModificationAccess().getConstraintParserRuleCall_4());
		}
		this_Constraint_4=ruleConstraint
		{
			$current = $this_Constraint_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutputKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getOutputAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleValueMod
entryRuleValueMod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueModRule()); }
	iv_ruleValueMod=ruleValueMod
	{ $current=$iv_ruleValueMod.current; }
	EOF;

// Rule ValueMod
ruleValueMod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueModRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getValueModAccess().getNameColDeclCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getValueModAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueModAccess().getExpLogExpParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleLogExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueModRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"dk.sdu.mdsd.CSVParserGenerator.LogExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getStrAction_0_0(),
						$current);
				}
			)
			otherlv_1='String'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getStringKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getIntegerAction_1_0(),
						$current);
				}
			)
			otherlv_3='Integer'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getIntegerKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getDateAction_2_0(),
						$current);
				}
			)
			otherlv_5='Date'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getDateKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getFloatAction_3_0(),
						$current);
				}
			)
			otherlv_7='Float'
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getFloatKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleLogExp
entryRuleLogExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogExpRule()); }
	iv_ruleLogExp=ruleLogExp
	{ $current=$iv_ruleLogExp.current; }
	EOF;

// Rule LogExp
ruleLogExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogExpAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='||'
					{
						newLeafNode(otherlv_1, grammarAccess.getLogExpAccess().getVerticalLineVerticalLineKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogExpAccess().getOrLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='&&'
					{
						newLeafNode(otherlv_3, grammarAccess.getLogExpAccess().getAmpersandAmpersandKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogExpAccess().getAndLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogExpAccess().getRightComparisonParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogExpRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"dk.sdu.mdsd.CSVParserGenerator.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getSumParserRuleCall_0());
		}
		this_Sum_0=ruleSum
		{
			$current = $this_Sum_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='<'
					{
						newLeafNode(otherlv_1, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getLtLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='>'
					{
						newLeafNode(otherlv_3, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getGtLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_5='=='
					{
						newLeafNode(otherlv_5, grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_0_2_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getEquLeftAction_1_0_2_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_7='!='
					{
						newLeafNode(otherlv_7, grammarAccess.getComparisonAccess().getExclamationMarkEqualsSignKeyword_1_0_3_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getNeqLeftAction_1_0_3_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_9='=<'
					{
						newLeafNode(otherlv_9, grammarAccess.getComparisonAccess().getEqualsSignLessThanSignKeyword_1_0_4_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getLeqLeftAction_1_0_4_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_11='=>'
					{
						newLeafNode(otherlv_11, grammarAccess.getComparisonAccess().getEqualsSignGreaterThanSignKeyword_1_0_5_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getGeqLeftAction_1_0_5_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightSumParserRuleCall_1_1_0());
					}
					lv_right_13_0=ruleSum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_13_0,
							"dk.sdu.mdsd.CSVParserGenerator.Sum");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParens
entryRuleParens returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParensRule()); }
	iv_ruleParens=ruleParens
	{ $current=$iv_ruleParens.current; }
	EOF;

// Rule Parens
ruleParens returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParensAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParensAccess().getExpLogExpParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleLogExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParensRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"dk.sdu.mdsd.CSVParserGenerator.LogExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParensAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleExternal
entryRuleExternal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalRule()); }
	iv_ruleExternal=ruleExternal
	{ $current=$iv_ruleExternal.current; }
	EOF;

// Rule External
ruleExternal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ExtFunc'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalAccess().getExtFuncKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExternalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getExternalAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getExternalAccess().getInpColDeclCrossReference_3_0());
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExternalAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleStatFunc
entryRuleStatFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatFuncRule()); }
	iv_ruleStatFunc=ruleStatFunc
	{ $current=$iv_ruleStatFunc.current; }
	EOF;

// Rule StatFunc
ruleStatFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatFuncAccess().getMaxAction_0_0(),
						$current);
				}
			)
			otherlv_1='Max'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatFuncAccess().getMaxKeyword_0_1());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getStatFuncAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatFuncRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getStatFuncAccess().getInputColDeclCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getStatFuncAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatFuncAccess().getMinAction_1_0(),
						$current);
				}
			)
			otherlv_6='Min'
			{
				newLeafNode(otherlv_6, grammarAccess.getStatFuncAccess().getMinKeyword_1_1());
			}
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getStatFuncAccess().getLeftParenthesisKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatFuncRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getStatFuncAccess().getInputColDeclCrossReference_1_3_0());
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getStatFuncAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatFuncAccess().getStdAction_2_0(),
						$current);
				}
			)
			otherlv_11='Std'
			{
				newLeafNode(otherlv_11, grammarAccess.getStatFuncAccess().getStdKeyword_2_1());
			}
			otherlv_12='('
			{
				newLeafNode(otherlv_12, grammarAccess.getStatFuncAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatFuncRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getStatFuncAccess().getInputColDeclCrossReference_2_3_0());
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getStatFuncAccess().getRightParenthesisKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatFuncAccess().getSumFuncAction_3_0(),
						$current);
				}
			)
			otherlv_16='Sum'
			{
				newLeafNode(otherlv_16, grammarAccess.getStatFuncAccess().getSumKeyword_3_1());
			}
			otherlv_17='('
			{
				newLeafNode(otherlv_17, grammarAccess.getStatFuncAccess().getLeftParenthesisKeyword_3_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatFuncRule());
						}
					}
					otherlv_18=RULE_ID
					{
						newLeafNode(otherlv_18, grammarAccess.getStatFuncAccess().getInputColDeclCrossReference_3_3_0());
					}
				)
			)
			otherlv_19=')'
			{
				newLeafNode(otherlv_19, grammarAccess.getStatFuncAccess().getRightParenthesisKeyword_3_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatFuncAccess().getMeanAction_4_0(),
						$current);
				}
			)
			otherlv_21='Mean'
			{
				newLeafNode(otherlv_21, grammarAccess.getStatFuncAccess().getMeanKeyword_4_1());
			}
			otherlv_22='('
			{
				newLeafNode(otherlv_22, grammarAccess.getStatFuncAccess().getLeftParenthesisKeyword_4_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatFuncRule());
						}
					}
					otherlv_23=RULE_ID
					{
						newLeafNode(otherlv_23, grammarAccess.getStatFuncAccess().getInputColDeclCrossReference_4_3_0());
					}
				)
			)
			otherlv_24=')'
			{
				newLeafNode(otherlv_24, grammarAccess.getStatFuncAccess().getRightParenthesisKeyword_4_4());
			}
		)
	)
;

// Entry rule entryRuleColumnAction
entryRuleColumnAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnActionRule()); }
	iv_ruleColumnAction=ruleColumnAction
	{ $current=$iv_ruleColumnAction.current; }
	EOF;

// Rule ColumnAction
ruleColumnAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getColumnActionAccess().getAddAction_0_0(),
						$current);
				}
			)
			otherlv_1='AddCol'
			{
				newLeafNode(otherlv_1, grammarAccess.getColumnActionAccess().getAddColKeyword_0_1());
			}
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getColumnActionAccess().getNameIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnActionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3='with'
			{
				newLeafNode(otherlv_3, grammarAccess.getColumnActionAccess().getWithKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnActionAccess().getModLogExpParserRuleCall_0_4_0());
					}
					lv_mod_4_0=ruleLogExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnActionRule());
						}
						set(
							$current,
							"mod",
							lv_mod_4_0,
							"dk.sdu.mdsd.CSVParserGenerator.LogExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getColumnActionAccess().getRemAction_1_0(),
						$current);
				}
			)
			otherlv_6='RemCol'
			{
				newLeafNode(otherlv_6, grammarAccess.getColumnActionAccess().getRemColKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnActionRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getColumnActionAccess().getNameColDeclCrossReference_1_2_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSumAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='+'
					{
						newLeafNode(otherlv_1, grammarAccess.getSumAccess().getPlusSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSumAccess().getPlusLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='-'
					{
						newLeafNode(otherlv_3, grammarAccess.getSumAccess().getHyphenMinusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSumAccess().getMinusLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSumAccess().getRightFactorParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"dk.sdu.mdsd.CSVParserGenerator.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='*'
					{
						newLeafNode(otherlv_1, grammarAccess.getFactorAccess().getAsteriskKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getFactorAccess().getMultLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='/'
					{
						newLeafNode(otherlv_3, grammarAccess.getFactorAccess().getSolidusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getFactorAccess().getDivLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0());
					}
					lv_right_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"dk.sdu.mdsd.CSVParserGenerator.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0());
		}
		this_Number_0=ruleNumber
		{
			$current = $this_Number_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getParensParserRuleCall_1());
		}
		this_Parens_1=ruleParens
		{
			$current = $this_Parens_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getColumnVarParserRuleCall_2());
		}
		this_ColumnVar_2=ruleColumnVar
		{
			$current = $this_ColumnVar_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleColumnVar
entryRuleColumnVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnVarRule()); }
	iv_ruleColumnVar=ruleColumnVar
	{ $current=$iv_ruleColumnVar.current; }
	EOF;

// Rule ColumnVar
ruleColumnVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getColumnVarRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getColumnVarAccess().getNameColDeclCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumberAccess().getNumAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='satisfies'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getSatisfiesKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getNameColDeclCrossReference_1_0());
				}
			)
		)
		otherlv_2='constraint'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getConstraintKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getExpLogExpParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleLogExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"dk.sdu.mdsd.CSVParserGenerator.LogExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
