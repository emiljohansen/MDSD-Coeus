/*
 * generated by Xtext 2.21.0
 */
package dk.sdu.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CSVParserGeneratorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ParserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Parser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFileAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFileFileDeclParserRuleCall_0_0 = (RuleCall)cFileAssignment_0.eContents().get(0);
		private final Keyword cColumnsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnsColDeclParserRuleCall_3_0 = (RuleCall)cColumnsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cModsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModsModificationParserRuleCall_5_0 = (RuleCall)cModsAssignment_5.eContents().get(0);
		private final Assignment cOutAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutOutputParserRuleCall_6_0 = (RuleCall)cOutAssignment_6.eContents().get(0);
		
		//Parser:
		//	file=FileDecl 'columns' '{' columns+=ColDecl+ '}' mods+=Modification* out=Output?;
		@Override public ParserRule getRule() { return rule; }
		
		//file=FileDecl 'columns' '{' columns+=ColDecl+ '}' mods+=Modification* out=Output?
		public Group getGroup() { return cGroup; }
		
		//file=FileDecl
		public Assignment getFileAssignment_0() { return cFileAssignment_0; }
		
		//FileDecl
		public RuleCall getFileFileDeclParserRuleCall_0_0() { return cFileFileDeclParserRuleCall_0_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_1() { return cColumnsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//columns+=ColDecl+
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//ColDecl
		public RuleCall getColumnsColDeclParserRuleCall_3_0() { return cColumnsColDeclParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//mods+=Modification*
		public Assignment getModsAssignment_5() { return cModsAssignment_5; }
		
		//Modification
		public RuleCall getModsModificationParserRuleCall_5_0() { return cModsModificationParserRuleCall_5_0; }
		
		//out=Output?
		public Assignment getOutAssignment_6() { return cOutAssignment_6; }
		
		//Output
		public RuleCall getOutOutputParserRuleCall_6_0() { return cOutOutputParserRuleCall_6_0; }
	}
	public class FileDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.FileDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FileDecl:
		//	'File' ':' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'File' ':' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'File'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class ColDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.ColDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cModsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModsModificationParserRuleCall_3_0 = (RuleCall)cModsAssignment_3.eContents().get(0);
		
		//ColDecl:
		//	name=ID ':' type=Type mods+=Modification*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type mods+=Modification*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//mods+=Modification*
		public Assignment getModsAssignment_3() { return cModsAssignment_3; }
		
		//Modification
		public RuleCall getModsModificationParserRuleCall_3_0() { return cModsModificationParserRuleCall_3_0; }
	}
	public class ModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Modification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueModParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatFuncParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColumnActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstraintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Modification:
		//	ValueMod | External | StatFunc | ColumnAction | Constraint;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueMod | External | StatFunc | ColumnAction | Constraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueMod
		public RuleCall getValueModParserRuleCall_0() { return cValueModParserRuleCall_0; }
		
		//External
		public RuleCall getExternalParserRuleCall_1() { return cExternalParserRuleCall_1; }
		
		//StatFunc
		public RuleCall getStatFuncParserRuleCall_2() { return cStatFuncParserRuleCall_2; }
		
		//ColumnAction
		public RuleCall getColumnActionParserRuleCall_3() { return cColumnActionParserRuleCall_3; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_4() { return cConstraintParserRuleCall_4; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Output:
		//	'Output' ':' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Output' ':' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'Output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class ValueModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.ValueMod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameColDeclCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameColDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cNameColDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpLogExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//ValueMod:
		//	name=[ColDecl] '=' exp=LogExp;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ColDecl] '=' exp=LogExp
		public Group getGroup() { return cGroup; }
		
		//name=[ColDecl]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[ColDecl]
		public CrossReference getNameColDeclCrossReference_0_0() { return cNameColDeclCrossReference_0_0; }
		
		//ID
		public RuleCall getNameColDeclIDTerminalRuleCall_0_0_1() { return cNameColDeclIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//exp=LogExp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//LogExp
		public RuleCall getExpLogExpParserRuleCall_2_0() { return cExpLogExpParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStrAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStringKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntegerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDateAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDateKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFloatAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFloatKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Type:
		//	{Str} 'String' | {Integer} 'Integer' | {Date} 'Date' | {Float} 'Float';
		@Override public ParserRule getRule() { return rule; }
		
		//{Str} 'String' | {Integer} 'Integer' | {Date} 'Date' | {Float} 'Float'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Str} 'String'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Str}
		public Action getStrAction_0_0() { return cStrAction_0_0; }
		
		//'String'
		public Keyword getStringKeyword_0_1() { return cStringKeyword_0_1; }
		
		//{Integer} 'Integer'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Integer}
		public Action getIntegerAction_1_0() { return cIntegerAction_1_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1_1() { return cIntegerKeyword_1_1; }
		
		//{Date} 'Date'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Date}
		public Action getDateAction_2_0() { return cDateAction_2_0; }
		
		//'Date'
		public Keyword getDateKeyword_2_1() { return cDateKeyword_2_1; }
		
		//{Float} 'Float'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Float}
		public Action getFloatAction_3_0() { return cFloatAction_3_0; }
		
		//'Float'
		public Keyword getFloatKeyword_3_1() { return cFloatKeyword_3_1; }
	}
	public class LogExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.LogExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cOrLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cAndLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//LogExp Expression:
		//	Comparison (('||' {Or.left=current} | '&&' {And.left=current}) right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (('||' {Or.left=current} | '&&' {And.left=current}) right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(('||' {Or.left=current} | '&&' {And.left=current}) right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('||' {Or.left=current} | '&&' {And.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'||' {Or.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_0_0() { return cVerticalLineVerticalLineKeyword_1_0_0_0; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_0_1() { return cOrLeftAction_1_0_0_1; }
		
		//'&&' {And.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_1_0() { return cAmpersandAmpersandKeyword_1_0_1_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_1_1() { return cAndLeftAction_1_0_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cLtLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cGtLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Action cEquLeftAction_1_0_2_1 = (Action)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Action cNeqLeftAction_1_0_3_1 = (Action)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Keyword cEqualsSignLessThanSignKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Action cLeqLeftAction_1_0_4_1 = (Action)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0_5_0 = (Keyword)cGroup_1_0_5.eContents().get(0);
		private final Action cGeqLeftAction_1_0_5_1 = (Action)cGroup_1_0_5.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSumParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		///*Comparison returns Expression:
		//	{Comparison} left=Sum (op=CompOp right=Sum)*
		//;*/ Comparison Expression:
		//	Sum (('<' {Lt.left=current} | '>' {Gt.left=current} | '==' {Equ.left=current} | '!=' {Neq.left=current} | '=<'
		//	{Leq.left=current} | '=>' {Geq.left=current}) right=Sum)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum (('<' {Lt.left=current} | '>' {Gt.left=current} | '==' {Equ.left=current} | '!=' {Neq.left=current} | '=<'
		//{Leq.left=current} | '=>' {Geq.left=current}) right=Sum)*
		public Group getGroup() { return cGroup; }
		
		//Sum
		public RuleCall getSumParserRuleCall_0() { return cSumParserRuleCall_0; }
		
		//(('<' {Lt.left=current} | '>' {Gt.left=current} | '==' {Equ.left=current} | '!=' {Neq.left=current} | '=<'
		//{Leq.left=current} | '=>' {Geq.left=current}) right=Sum)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('<' {Lt.left=current} | '>' {Gt.left=current} | '==' {Equ.left=current} | '!=' {Neq.left=current} | '=<'
		//{Leq.left=current} | '=>' {Geq.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'<' {Lt.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_0() { return cLessThanSignKeyword_1_0_0_0; }
		
		//{Lt.left=current}
		public Action getLtLeftAction_1_0_0_1() { return cLtLeftAction_1_0_0_1; }
		
		//'>' {Gt.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_1_0() { return cGreaterThanSignKeyword_1_0_1_0; }
		
		//{Gt.left=current}
		public Action getGtLeftAction_1_0_1_1() { return cGtLeftAction_1_0_1_1; }
		
		//'==' {Equ.left=current}
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_2_0() { return cEqualsSignEqualsSignKeyword_1_0_2_0; }
		
		//{Equ.left=current}
		public Action getEquLeftAction_1_0_2_1() { return cEquLeftAction_1_0_2_1; }
		
		//'!=' {Neq.left=current}
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_3_0() { return cExclamationMarkEqualsSignKeyword_1_0_3_0; }
		
		//{Neq.left=current}
		public Action getNeqLeftAction_1_0_3_1() { return cNeqLeftAction_1_0_3_1; }
		
		//'=<' {Leq.left=current}
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//'=<'
		public Keyword getEqualsSignLessThanSignKeyword_1_0_4_0() { return cEqualsSignLessThanSignKeyword_1_0_4_0; }
		
		//{Leq.left=current}
		public Action getLeqLeftAction_1_0_4_1() { return cLeqLeftAction_1_0_4_1; }
		
		//'=>' {Geq.left=current}
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0_5_0() { return cEqualsSignGreaterThanSignKeyword_1_0_5_0; }
		
		//{Geq.left=current}
		public Action getGeqLeftAction_1_0_5_1() { return cGeqLeftAction_1_0_5_1; }
		
		//right=Sum
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Sum
		public RuleCall getRightSumParserRuleCall_1_1_0() { return cRightSumParserRuleCall_1_1_0; }
	}
	public class ParensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpLogExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///*CompOp:
		//	{Geq} '=>' | {Leq} '=<' | {Neq} '!=' | {Equ} '==' | {Gt} '>' | {Lt} '<'
		//;*/ Parens:
		//	'(' exp=LogExp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=LogExp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=LogExp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//LogExp
		public RuleCall getExpLogExpParserRuleCall_1_0() { return cExpLogExpParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.External");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInpColDeclCrossReference_3_0 = (CrossReference)cInpAssignment_3.eContents().get(0);
		private final RuleCall cInpColDeclIDTerminalRuleCall_3_0_1 = (RuleCall)cInpColDeclCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//External:
		//	'ExtFunc' name=ID '(' inp=[ColDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ExtFunc' name=ID '(' inp=[ColDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'ExtFunc'
		public Keyword getExtFuncKeyword_0() { return cExtFuncKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//inp=[ColDecl]
		public Assignment getInpAssignment_3() { return cInpAssignment_3; }
		
		//[ColDecl]
		public CrossReference getInpColDeclCrossReference_3_0() { return cInpColDeclCrossReference_3_0; }
		
		//ID
		public RuleCall getInpColDeclIDTerminalRuleCall_3_0_1() { return cInpColDeclIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StatFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.StatFunc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMaxAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMaxKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cInputAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cInputColDeclCrossReference_0_3_0 = (CrossReference)cInputAssignment_0_3.eContents().get(0);
		private final RuleCall cInputColDeclIDTerminalRuleCall_0_3_0_1 = (RuleCall)cInputColDeclCrossReference_0_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMinKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInputAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cInputColDeclCrossReference_1_3_0 = (CrossReference)cInputAssignment_1_3.eContents().get(0);
		private final RuleCall cInputColDeclIDTerminalRuleCall_1_3_0_1 = (RuleCall)cInputColDeclCrossReference_1_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStdAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cStdKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInputAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cInputColDeclCrossReference_2_3_0 = (CrossReference)cInputAssignment_2_3.eContents().get(0);
		private final RuleCall cInputColDeclIDTerminalRuleCall_2_3_0_1 = (RuleCall)cInputColDeclCrossReference_2_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSumFuncAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSumKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInputAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cInputColDeclCrossReference_3_3_0 = (CrossReference)cInputAssignment_3_3.eContents().get(0);
		private final RuleCall cInputColDeclIDTerminalRuleCall_3_3_0_1 = (RuleCall)cInputColDeclCrossReference_3_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cMeanAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cMeanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cInputAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cInputColDeclCrossReference_4_3_0 = (CrossReference)cInputAssignment_4_3.eContents().get(0);
		private final RuleCall cInputColDeclIDTerminalRuleCall_4_3_0_1 = (RuleCall)cInputColDeclCrossReference_4_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//StatFunc:
		//	{Max} 'Max' '(' input=[ColDecl] ')' | {Min} 'Min' '(' input=[ColDecl] ')' | {Std} 'Std' '(' input=[ColDecl] ')'
		//	| {SumFunc} 'Sum' '(' input=[ColDecl] ')' | {Mean} 'Mean' '(' input=[ColDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Max} 'Max' '(' input=[ColDecl] ')' | {Min} 'Min' '(' input=[ColDecl] ')' | {Std} 'Std' '(' input=[ColDecl] ')' |
		//{SumFunc} 'Sum' '(' input=[ColDecl] ')' | {Mean} 'Mean' '(' input=[ColDecl] ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Max} 'Max' '(' input=[ColDecl] ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Max}
		public Action getMaxAction_0_0() { return cMaxAction_0_0; }
		
		//'Max'
		public Keyword getMaxKeyword_0_1() { return cMaxKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//input=[ColDecl]
		public Assignment getInputAssignment_0_3() { return cInputAssignment_0_3; }
		
		//[ColDecl]
		public CrossReference getInputColDeclCrossReference_0_3_0() { return cInputColDeclCrossReference_0_3_0; }
		
		//ID
		public RuleCall getInputColDeclIDTerminalRuleCall_0_3_0_1() { return cInputColDeclIDTerminalRuleCall_0_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{Min} 'Min' '(' input=[ColDecl] ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Min}
		public Action getMinAction_1_0() { return cMinAction_1_0; }
		
		//'Min'
		public Keyword getMinKeyword_1_1() { return cMinKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//input=[ColDecl]
		public Assignment getInputAssignment_1_3() { return cInputAssignment_1_3; }
		
		//[ColDecl]
		public CrossReference getInputColDeclCrossReference_1_3_0() { return cInputColDeclCrossReference_1_3_0; }
		
		//ID
		public RuleCall getInputColDeclIDTerminalRuleCall_1_3_0_1() { return cInputColDeclIDTerminalRuleCall_1_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//{Std} 'Std' '(' input=[ColDecl] ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Std}
		public Action getStdAction_2_0() { return cStdAction_2_0; }
		
		//'Std'
		public Keyword getStdKeyword_2_1() { return cStdKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//input=[ColDecl]
		public Assignment getInputAssignment_2_3() { return cInputAssignment_2_3; }
		
		//[ColDecl]
		public CrossReference getInputColDeclCrossReference_2_3_0() { return cInputColDeclCrossReference_2_3_0; }
		
		//ID
		public RuleCall getInputColDeclIDTerminalRuleCall_2_3_0_1() { return cInputColDeclIDTerminalRuleCall_2_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{SumFunc} 'Sum' '(' input=[ColDecl] ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{SumFunc}
		public Action getSumFuncAction_3_0() { return cSumFuncAction_3_0; }
		
		//'Sum'
		public Keyword getSumKeyword_3_1() { return cSumKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//input=[ColDecl]
		public Assignment getInputAssignment_3_3() { return cInputAssignment_3_3; }
		
		//[ColDecl]
		public CrossReference getInputColDeclCrossReference_3_3_0() { return cInputColDeclCrossReference_3_3_0; }
		
		//ID
		public RuleCall getInputColDeclIDTerminalRuleCall_3_3_0_1() { return cInputColDeclIDTerminalRuleCall_3_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//{Mean} 'Mean' '(' input=[ColDecl] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Mean}
		public Action getMeanAction_4_0() { return cMeanAction_4_0; }
		
		//'Mean'
		public Keyword getMeanKeyword_4_1() { return cMeanKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//input=[ColDecl]
		public Assignment getInputAssignment_4_3() { return cInputAssignment_4_3; }
		
		//[ColDecl]
		public CrossReference getInputColDeclCrossReference_4_3_0() { return cInputColDeclCrossReference_4_3_0; }
		
		//ID
		public RuleCall getInputColDeclIDTerminalRuleCall_4_3_0_1() { return cInputColDeclIDTerminalRuleCall_4_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class ColumnActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.ColumnAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAddAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAddColKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cWithKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cModAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cModLogExpParserRuleCall_0_4_0 = (RuleCall)cModAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRemAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRemColKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cNameColDeclCrossReference_1_2_0 = (CrossReference)cNameAssignment_1_2.eContents().get(0);
		private final RuleCall cNameColDeclIDTerminalRuleCall_1_2_0_1 = (RuleCall)cNameColDeclCrossReference_1_2_0.eContents().get(1);
		
		//ColumnAction:
		//	{Add} 'AddCol' name=ID 'with' mod=LogExp | {Rem} 'RemCol' name=[ColDecl];
		@Override public ParserRule getRule() { return rule; }
		
		//{Add} 'AddCol' name=ID 'with' mod=LogExp | {Rem} 'RemCol' name=[ColDecl]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Add} 'AddCol' name=ID 'with' mod=LogExp
		public Group getGroup_0() { return cGroup_0; }
		
		//{Add}
		public Action getAddAction_0_0() { return cAddAction_0_0; }
		
		//'AddCol'
		public Keyword getAddColKeyword_0_1() { return cAddColKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'with'
		public Keyword getWithKeyword_0_3() { return cWithKeyword_0_3; }
		
		//mod=LogExp
		public Assignment getModAssignment_0_4() { return cModAssignment_0_4; }
		
		//LogExp
		public RuleCall getModLogExpParserRuleCall_0_4_0() { return cModLogExpParserRuleCall_0_4_0; }
		
		//{Rem} 'RemCol' name=[ColDecl]
		public Group getGroup_1() { return cGroup_1; }
		
		//{Rem}
		public Action getRemAction_1_0() { return cRemAction_1_0; }
		
		//'RemCol'
		public Keyword getRemColKeyword_1_1() { return cRemColKeyword_1_1; }
		
		//name=[ColDecl]
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//[ColDecl]
		public CrossReference getNameColDeclCrossReference_1_2_0() { return cNameColDeclCrossReference_1_2_0; }
		
		//ID
		public RuleCall getNameColDeclIDTerminalRuleCall_1_2_0_1() { return cNameColDeclIDTerminalRuleCall_1_2_0_1; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMinusLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Sum Expression:
		//	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Plus.left=current} | '-' {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Plus.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_1() { return cPlusLeftAction_1_0_0_1; }
		
		//'-' {Minus.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_1() { return cMinusLeftAction_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor Expression:
		//	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mult.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mult.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_1() { return cMultLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParensParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColumnVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	Number | Parens | ColumnVar;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parens | ColumnVar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parens
		public RuleCall getParensParserRuleCall_1() { return cParensParserRuleCall_1; }
		
		//ColumnVar
		public RuleCall getColumnVarParserRuleCall_2() { return cColumnVarParserRuleCall_2; }
	}
	public class ColumnVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.ColumnVar");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameColDeclCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameColDeclIDTerminalRuleCall_0_1 = (RuleCall)cNameColDeclCrossReference_0.eContents().get(1);
		
		//ColumnVar:
		//	name=[ColDecl];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ColDecl]
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//[ColDecl]
		public CrossReference getNameColDeclCrossReference_0() { return cNameColDeclCrossReference_0; }
		
		//ID
		public RuleCall getNameColDeclIDTerminalRuleCall_0_1() { return cNameColDeclIDTerminalRuleCall_0_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number:
		//	{Num} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Num}
		public Action getNumAction_0() { return cNumAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.CSVParserGenerator.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSatisfiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameColDeclCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameColDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cNameColDeclCrossReference_1_0.eContents().get(1);
		private final Keyword cConstraintKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpLogExpParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Constraint:
		//	'satisfies' name=[ColDecl] 'constraint' exp=LogExp;
		@Override public ParserRule getRule() { return rule; }
		
		//'satisfies' name=[ColDecl] 'constraint' exp=LogExp
		public Group getGroup() { return cGroup; }
		
		//'satisfies'
		public Keyword getSatisfiesKeyword_0() { return cSatisfiesKeyword_0; }
		
		//name=[ColDecl]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[ColDecl]
		public CrossReference getNameColDeclCrossReference_1_0() { return cNameColDeclCrossReference_1_0; }
		
		//ID
		public RuleCall getNameColDeclIDTerminalRuleCall_1_0_1() { return cNameColDeclIDTerminalRuleCall_1_0_1; }
		
		//'constraint'
		public Keyword getConstraintKeyword_2() { return cConstraintKeyword_2; }
		
		//exp=LogExp
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//LogExp
		public RuleCall getExpLogExpParserRuleCall_3_0() { return cExpLogExpParserRuleCall_3_0; }
	}
	
	
	private final ParserElements pParser;
	private final FileDeclElements pFileDecl;
	private final ColDeclElements pColDecl;
	private final ModificationElements pModification;
	private final OutputElements pOutput;
	private final ValueModElements pValueMod;
	private final TypeElements pType;
	private final LogExpElements pLogExp;
	private final ComparisonElements pComparison;
	private final ParensElements pParens;
	private final ExternalElements pExternal;
	private final StatFuncElements pStatFunc;
	private final ColumnActionElements pColumnAction;
	private final SumElements pSum;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	private final ColumnVarElements pColumnVar;
	private final NumberElements pNumber;
	private final ConstraintElements pConstraint;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CSVParserGeneratorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pParser = new ParserElements();
		this.pFileDecl = new FileDeclElements();
		this.pColDecl = new ColDeclElements();
		this.pModification = new ModificationElements();
		this.pOutput = new OutputElements();
		this.pValueMod = new ValueModElements();
		this.pType = new TypeElements();
		this.pLogExp = new LogExpElements();
		this.pComparison = new ComparisonElements();
		this.pParens = new ParensElements();
		this.pExternal = new ExternalElements();
		this.pStatFunc = new StatFuncElements();
		this.pColumnAction = new ColumnActionElements();
		this.pSum = new SumElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
		this.pColumnVar = new ColumnVarElements();
		this.pNumber = new NumberElements();
		this.pConstraint = new ConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mdsd.CSVParserGenerator".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Parser:
	//	file=FileDecl 'columns' '{' columns+=ColDecl+ '}' mods+=Modification* out=Output?;
	public ParserElements getParserAccess() {
		return pParser;
	}
	
	public ParserRule getParserRule() {
		return getParserAccess().getRule();
	}
	
	//FileDecl:
	//	'File' ':' name=STRING;
	public FileDeclElements getFileDeclAccess() {
		return pFileDecl;
	}
	
	public ParserRule getFileDeclRule() {
		return getFileDeclAccess().getRule();
	}
	
	//ColDecl:
	//	name=ID ':' type=Type mods+=Modification*;
	public ColDeclElements getColDeclAccess() {
		return pColDecl;
	}
	
	public ParserRule getColDeclRule() {
		return getColDeclAccess().getRule();
	}
	
	//Modification:
	//	ValueMod | External | StatFunc | ColumnAction | Constraint;
	public ModificationElements getModificationAccess() {
		return pModification;
	}
	
	public ParserRule getModificationRule() {
		return getModificationAccess().getRule();
	}
	
	//Output:
	//	'Output' ':' name=STRING;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//ValueMod:
	//	name=[ColDecl] '=' exp=LogExp;
	public ValueModElements getValueModAccess() {
		return pValueMod;
	}
	
	public ParserRule getValueModRule() {
		return getValueModAccess().getRule();
	}
	
	//Type:
	//	{Str} 'String' | {Integer} 'Integer' | {Date} 'Date' | {Float} 'Float';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//LogExp Expression:
	//	Comparison (('||' {Or.left=current} | '&&' {And.left=current}) right=Comparison)*;
	public LogExpElements getLogExpAccess() {
		return pLogExp;
	}
	
	public ParserRule getLogExpRule() {
		return getLogExpAccess().getRule();
	}
	
	///*Comparison returns Expression:
	//	{Comparison} left=Sum (op=CompOp right=Sum)*
	//;*/ Comparison Expression:
	//	Sum (('<' {Lt.left=current} | '>' {Gt.left=current} | '==' {Equ.left=current} | '!=' {Neq.left=current} | '=<'
	//	{Leq.left=current} | '=>' {Geq.left=current}) right=Sum)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	///*CompOp:
	//	{Geq} '=>' | {Leq} '=<' | {Neq} '!=' | {Equ} '==' | {Gt} '>' | {Lt} '<'
	//;*/ Parens:
	//	'(' exp=LogExp ')';
	public ParensElements getParensAccess() {
		return pParens;
	}
	
	public ParserRule getParensRule() {
		return getParensAccess().getRule();
	}
	
	//External:
	//	'ExtFunc' name=ID '(' inp=[ColDecl] ')';
	public ExternalElements getExternalAccess() {
		return pExternal;
	}
	
	public ParserRule getExternalRule() {
		return getExternalAccess().getRule();
	}
	
	//StatFunc:
	//	{Max} 'Max' '(' input=[ColDecl] ')' | {Min} 'Min' '(' input=[ColDecl] ')' | {Std} 'Std' '(' input=[ColDecl] ')'
	//	| {SumFunc} 'Sum' '(' input=[ColDecl] ')' | {Mean} 'Mean' '(' input=[ColDecl] ')';
	public StatFuncElements getStatFuncAccess() {
		return pStatFunc;
	}
	
	public ParserRule getStatFuncRule() {
		return getStatFuncAccess().getRule();
	}
	
	//ColumnAction:
	//	{Add} 'AddCol' name=ID 'with' mod=LogExp | {Rem} 'RemCol' name=[ColDecl];
	public ColumnActionElements getColumnActionAccess() {
		return pColumnAction;
	}
	
	public ParserRule getColumnActionRule() {
		return getColumnActionAccess().getRule();
	}
	
	//Sum Expression:
	//	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Factor Expression:
	//	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary Expression:
	//	Number | Parens | ColumnVar;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//ColumnVar:
	//	name=[ColDecl];
	public ColumnVarElements getColumnVarAccess() {
		return pColumnVar;
	}
	
	public ParserRule getColumnVarRule() {
		return getColumnVarAccess().getRule();
	}
	
	//Number:
	//	{Num} value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Constraint:
	//	'satisfies' name=[ColDecl] 'constraint' exp=LogExp;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
